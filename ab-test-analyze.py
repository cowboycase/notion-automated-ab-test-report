# --- PHASE 1: SETUP AND DATA LOADING ---
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from notion_client import Client
import os

print("Analysis starting...")

# Reading the dataset
try:
    df = pd.read_csv('marketing_ab.csv')
except FileNotFoundError:
    print("ERROR: 'marketing_ab.csv' was not found in this folder.")
    exit()

# Cleaning column names
df.columns = df.columns.str.replace(' ', '_')

# --- PHASE 2: ANALYSIS AND STATISTICAL TESTING ---
df['converted'] = df['converted'].astype(int)
conversion_rates = df.groupby('test_group')['converted'].mean()
contingency_table = pd.crosstab(df['test_group'], df['converted'])
chi2, p_value, _, _ = stats.chi2_contingency(contingency_table)
print("Analysis complete.")

# --- PHASE 3: VISUALIZE AND SAVE RESULTS ---
plt.figure(figsize=(8, 6))
sns.barplot(x=conversion_rates.index, y=conversion_rates.values, palette='viridis')
plt.title('Conversion Rate Comparison by Group', fontsize=16)
plt.xlabel('Group', fontsize=12)
plt.ylabel('Conversion Rate', fontsize=12)
plt.ylim(0, 0.03)
graph_filename = 'analysis_result_graph_EN.png'
plt.savefig(graph_filename)
print(f"Graph file saved as '{graph_filename}'.")

# --- PHASE 4: SEND RESULTS TO NOTION ---
# YOU CAN RUN THE SCRIPT BY ENTERING YOUR OWN DETAILS IN THESE FIELDS
NOTION_API_KEY = "YOUR_NOTION_API_KEY_HERE"
NOTION_PAGE_ID = "YOUR_NOTION_PAGE_ID_HERE"
IMGUR_GRAPH_LINK = "YOUR_IMGUR_GRAPH_LINK_HERE"
# Initialize the Notion client
notion = Client(auth=NOTION_API_KEY)

# English texts for the report
alpha = 0.05
if p_value < alpha:
    decision_text = "The difference IS STATISTGLISHLY SIGNIFICANT."
    comment_text = "The advertising campaign (ad group) was significantly more successful."
else:
    decision_text = "The difference is NOT statistically significant."
    comment_text = "The observed difference in conversion rates could be due to random chance."

print("\nConnecting to Notion and sending the report...")

try:
    # Clear the old report
    old_blocks = notion.blocks.children.list(block_id=NOTION_PAGE_ID)['results']
    for block in old_blocks:
        notion.blocks.delete(block_id=block['id'])
    print("Old report cleared.")

    # Prepare the list of blocks to send
    blocks_to_send = [
        {"type": "heading_1", "heading_1": {"rich_text": [{"type": "text", "text": {"content": "A/B Test Results Report"}}]}},
        {"type": "paragraph", "paragraph": {"rich_text": [{"type": "text", "text": {"content": "This report was automatically generated by a Python script."}}]}},
        {"type": "heading_2", "heading_2": {"rich_text": [{"type": "text", "text": {"content": "Key Findings"}}]}},
        {"type": "bulleted_list_item", "bulleted_list_item": {"rich_text": [{"type": "text", "text": {"content": f"Ad Group (test) Conversion Rate: {conversion_rates['ad']:.2%}"}}]}},
        {"type": "bulleted_list_item", "bulleted_list_item": {"rich_text": [{"type": "text", "text": {"content": f"PSA Group (control) Conversion Rate: {conversion_rates['psa']:.2%}"}}]}},
        {"type": "heading_2", "heading_2": {"rich_text": [{"type": "text", "text": {"content": "Statistical Conclusion"}}]}},
        {
            "type": "callout",
            "callout": {
                "rich_text": [{"type": "text", "text": {"content": f"Decision: {decision_text}"}}],
                "icon": {"emoji": "✅" if p_value < alpha else "❌"},
                "color": "green_background" if p_value < alpha else "red_background"
            }
        },
        {"type": "paragraph", "paragraph": {"rich_text": [{"type": "text", "text": {"content": comment_text}}]}},
        {"type": "paragraph", "paragraph": {"rich_text": [{"type": "text", "text": {"content": f"(Calculated p-value: {p_value:.10f})"}}]}},
        {"type": "heading_2", "heading_2": {"rich_text": [{"type": "text", "text": {"content": "Result Visualization"}}]}},
        {
            "type": "image",
            "image": {
                "type": "external",
                "external": {"url": "YOUR_IMGUR_GRAPH_LINK_HERE"}
            }
        }
    ]

    # Send the blocks to Notion
    notion.blocks.children.append(block_id=NOTION_PAGE_ID, children=blocks_to_send)
    
    print("Success! The report has been sent to your Notion page.")

except Exception as e:
    print(f"ERROR: An issue occurred while sending data to Notion: {e}")